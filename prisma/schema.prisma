// Prisma schema for Deforestation Prevention Web Application

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or your database
  url      = env("DATABASE_URL")
}

// User model (Clerk managed)
model User {
  id          String    @id // Clerk user ID
  name        String
  email       String    @unique
  role        Role      @default(CITIZEN)
  reports     Report[]
  posts       Post[]
  comments    Comment[]

  @@map("users")
}

// User Roles
enum Role {
  CITIZEN
  LOCAL_BODY
  GOVERNMENT
}

// Report model
model Report {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  type        ReportType // Added report type
  location    String    // General location string
  latitude    Float?    // Optional latitude
  longitude   Float?    // Optional longitude
  description String
  imageUrl    String?   // URL to uploaded image
  severity    Severity  @default(MEDIUM) // Added severity
  status      ReportStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("reports")
}

// Report Types
enum ReportType {
  DEFORESTATION
  WILDLIFE
  LOGGING
  POLLUTION
}

// Report Severity Levels
enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Report Status
enum ReportStatus {
  PENDING
  UNDER_REVIEW
  ACTION_TAKEN
  CLOSED
  INVALID
}

// Model for environmental data associated with a location
model EnvironmentalData {
  id          String    @id @default(uuid())
  location    String    @unique // Store location name or a unique identifier
  latitude    Float
  longitude   Float
  aqi         Float?    // Air Quality Index
  oxygenLevel Float?    // Oxygen level metric
  otherMetrics Json?     // Store other relevant data as JSON
  report      MLReport? // Relation to ML report (one-to-one)

  @@map("environmental_data")
}

// Model for ML-generated reports/conclusions
model MLReport {
  id                  String    @id @default(uuid())
  dataId              String    @unique
  environmentalData   EnvironmentalData @relation(fields: [dataId], references: [id])
  summary             String    // Summary of the ML analysis
  negativeImpact      String    // Detailed explanation of negative impacts
  recommendations     String?   // Recommendations or suggested actions
  confidenceScore     Float?    // Confidence score of the ML prediction
  modelVersion        String?   // Version of the ML model used
  createdAt           DateTime  @default(now())

  @@map("ml_reports")
}

// Community Post model
model Post {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  title       String
  content     String
  imageUrl    String?   // URL to uploaded image
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]

  @@map("posts")
}

// Comment model for community posts
model Comment {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  postId      String
  post        Post      @relation(fields: [postId], references: [id])
  text        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("comments")
}

// Model for Activity/Program
model Activity {
  id          String    @id @default(uuid())
  title       String
  description String
  location    String    // Location of the activity
  date        DateTime
  organizer   String?   // Optional organizer information
  contact     String?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  distance    String? // Added distance
  latitude    Float?
  longitude   Float?

  @@map("activities")
}
